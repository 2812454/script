#!/bin/bash
#====================================================
#
#====================================================
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'
msg01='\033[1;37m\033[1;33mUsuário Nulo\033[1;31m'
msg02='\033[1;37m\033[1;33mNome muito curto (MIN: 2 CHARACTERS)\033[1;31m'
msg03='\033[1;37m\033[1;33mNome muito grande (MAX: 5 CARACTERES)\033[1;31m'
msg04='\033[1;37m\033[1;33mSenha Nula\033[1;31m'
msg05='\033[1;37m\033[1;33mSenha muito curta\033[1;31m'
msg06='\033[1;37m\033[1;33mSenha muito grande\033[1;31m'
msg07='\033[1;37m\033[1;33mDuração Nula\033[1;31m'
msg08='\033[1;37m\033[1;33mDuração invalida, utilize números\033[1;31m'
msg09='\033[1;37m\033[1;33mDuração máxima de um ano\033[1;31m'
msg11='\033[1;37m\033[1;33mLimite Nulo\033[1;31m'
msg12='\033[1;37m\033[1;33mLimite invalido, utilize números\033[1;31m'
msg13='\033[1;37m\033[1;33mLimite máximo de 999\033[1;31m'
msg14='\033[1;37m\033[1;33mUsuario já Existe\033[1;31m'
msg15='\033[1;37m\033[1;33m(Apenas números) GB = Min: 1gb Max: 1000gb\033[1;31m'
msg16='\033[1;37m\033[1;33m(Apenas números)\033[1;31m'
msg17='\033[1;37m\033[1;33m(Sem imformação - Para Cancelar Digite CRTL + C)\033[1;31m'
    err_fun () {
        case $1 in
        1)msg -verm "$(fun_trans "Usuário Nulo")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        2)msg -verm "$(fun_trans "Nome muito curto (MIN: 2 CHARACTERS)")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        3)msg -verm "$(fun_trans "Nome muito grande (MAX: 5 CARACTERES)")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        4)msg -verm "$(fun_trans "Senha Nula")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        5)msg -verm "$(fun_trans "Senha muito curta")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        6)msg -verm "$(fun_trans "Senha muito grande")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        7)msg -verm "$(fun_trans "Duração Nula")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        8)msg -verm "$(fun_trans "Duração invalida, utilize números")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        9)msg -verm "$(fun_trans "Duração máxima de um ano")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        11)msg -verm "$(fun_trans "Limite Nulo")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        12)msg -verm "$(fun_trans "Limite invalido, utilize números")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        13)msg -verm "$(fun_trans "Limite máximo de 999")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        14)msg -verm "$(fun_trans "Usuario já Existe")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
	    15)msg -verm "$(fun_trans "(Apenas números) GB = Min: 1gb Max: 1000gb")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
	    16)msg -verm "$(fun_trans "(Apenas números)")"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
	    17)msg -verm "$(fun_trans "(Sem imformação - Para Cancelar Digite CRTL + C)")"; sleep 4s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
        esac
    }


    addusrsshv2ray () {
    clear
    echo -e "\E[44;1;37m         ADICIONAR UTILIZADOR SSH | UUID         \E[0m"
    ##DIAS
    valid=$(date '+%C%y-%m-%d' -d " +31 days")		

    ##E-MAIL ALEATORIO		  
    #MAILITO=$(cat /dev/urandom | tr -dc '[:alnum:]' | head -c 10)

    UUID=`uuidgen`


    while true; do
    echo -ne "\e[91m >> 🗣️ UTILIZADOR: \033[1;92m"
         read -p ": " nick
         nick="$(echo $nick|sed -e 's/[^a-z0-9 -]//ig')"
         if [[ -z $nick ]]; then
         echo -e "$msg17" && continue
         elif [[ "${#nick}" -lt "2" ]]; then
         echo -e "$msg02" && continue
         elif [[ "${#nick}" -gt "20" ]]; then
         echo -e "$msg03" && continue
         fi
         break
    done

    echo -ne "\e[91m >> 🔑 PASSWORD: \033[1;92m"
    while true; do
         read -p ": " password
         password="$(echo $password|sed -e 's/[^a-z0-9 -]//ig')"
         if [[ -z "$password" ]]; then
         echo -e "$msg17" && continue
         elif [[ "${#password}" -lt "2" ]]; then
         echo -e "$msg08" && continue
         elif [[ "$password" -gt "360" ]]; then
         echo -e "$msg09" && continue
         fi 
         break
    done

    echo -e "\e[91m >> 🔑 UUID: \e[92m$UUID "
    while true; do
         echo -ne "\e[91m >> Duração de UUID (Dias):\033[1;92m " && read diasuser
         if [[ -z "$diasuser" ]]; then
         echo -e "$msg17" && continue
         elif [[ "$diasuser" != +([0-9]) ]]; then
         echo -e "$msg08" && continue
         elif [[ "$diasuser" -gt "360" ]]; then
         echo -e "$msg09" && continue
         fi 
         break
    done

    echo -ne "\e[91m >> 📲 LIMITE DE LIGAÇÕES: \033[1;92m"
    while true; do
         read -p ": " sshlimiter
         sshlimiter="$(echo $sshlimiter|sed -e 's/[^a-z0-9 -]//ig')"
         if [[ -z "$sshlimiter" ]]; then
         echo -e "$msg17" && continue
         elif [[ "$sshlimiter" != +([0-9]) ]]; then
         echo -e "$msg08" && continue
         elif [[ "$sshlimiter" -gt "9" ]]; then
         echo -e "$msg09" && continue
         fi 
         break
    done

    ##ADDUSERV2RAY		  
    
    nick=$nick	  

    sed -i '13i\           \{' /etc/v2ray/config.json
    sed -i '14i\           \"alterId": 0,' /etc/v2ray/config.json
    sed -i '15i\           \"id": "'$UUID'",' /etc/v2ray/config.json
    sed -i '16i\           \"ssh": "'$nick'"' /etc/v2ray/config.json
    sed -i '17i\           \},' /etc/v2ray/config.json
    echo ""


    #Lim
    [[ $(cat /etc/passwd |grep $1: |grep -vi [a-z]$1 |grep -v [0-9]$1 > /dev/null) ]] && return 1
    valid=$(date '+%C%y-%m-%d' -d " +$diasuser days") && datexp=$(date "+%F" -d " + $diasuser days")
    echo -e "\e[91m >> Expira em : \e[92m$datexp "


    #final=$(date "+%Y-%m-%d" -d "+$dias days")
    #gui=$(date "+%d/%m/%Y" -d "+$dias days")

    pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)

    ##ADICIONAR UTILIZADOR SSH
    useradd -e $valid -M -s /bin/false -p $pass $nick >/dev/null 2>&1 &
    echo "$nick" >>/root/namee
    #echo "$vl" >> /root/valor
    echo "$password" >/etc/SSHPlus/senha/$nick
    echo "$nick $sshlimiter" >>/root/usuarios.db
    echo "" 
    echo -e "\E[44;1;37m          DADOS UTILIZADOR SSH | UUID            \E[0m"
    echo -e "\033[1;32m 🗣️ UTILIZADOR: \033[1;37m$nick"
    echo -e "\033[1;32m 🔑 PASSWORD: \033[1;37m$password"
    echo -e "\033[1;32m ⌛ EXPIRA EM: \033[1;37m$valid"
    echo -e "\033[1;32m 📲 LIMITE DE LIGAÇÕES: \033[1;37m$sshlimiter"

    ##Registro
    echo "  $UUID | $nick | $valid " >> /etc/SSHPlus/RegV2ray
    Fecha=`date +%d-%m-%y-%R`
    cp /etc/SSHPlus/RegV2ray /etc/SSHPlus/v2ray/RegV2ray-"$Fecha"
    v2ray restart > /dev/null 2>&1
    echo ""
    v2ray info > /etc/SSHPlus/v2ray/confuuid.log
    lineP=$(sed -n '/'${UUID}'/=' /etc/SSHPlus/v2ray/confuuid.log)
    numl1=4
    let suma=$lineP+$numl1
    sed -n ${suma}p /etc/SSHPlus/v2ray/confuuid.log 
    echo ""
    sed -i "11 s;104.16.18.94%3A443;$nick;g" /etc/SSHPlus/v2ray/confuuid.log
    cat /etc/SSHPlus/v2ray/confuuid.log  | sed -n '11 p'
    echo "" 
    echo -e "\E[44;1;37m    CRIADO COM SUCESSO UTILIZADOR SSH | UUID     \E[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray
    }














    delusrsshv2ray () {
    clear 
    clear
    invaliduuid () {
    echo -e "\e[91m                    SSH | UUID INVALIDO              \n"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray
    }
    echo -e "\E[44;1;37m         ELIMINAR UTILIZADOR SSH | UUID         \E[0m"
    echo -e "\e[97m                 UUID                  |   SSH  \e[93m"
    echo -e "\e[33m$(cat /etc/SSHPlus/RegV2ray|cut -d '|' -f2,1)" 


    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -ne "\e[91m >> DIGITE SSH | UUID PARA ELIMINAR:\n \033[1;92m " && read user

    if cat /etc/passwd |grep -w $user > /dev/null; then
                echo ""
                pkill -f "$user" > /dev/null 2>&1
                deluser --force $user > /dev/null 2>&1
                echo -e "\E[41;1;37m Usuario $user removido com sucesso! \E[0m"
                grep -v ^$user[[:space:]] /root/usuarios.db > /tmp/ph ; cat /tmp/ph > /root/usuarios.db
                rm /etc/SSHPlus/senha/$user 1>/dev/null 2>/dev/null
    fi     
    [[ $(sed -n '/'${user}'/=' /etc/v2ray/config.json|head -1) ]] || invaliduuid
    lineP=$(sed -n '/'${user}'/=' /etc/v2ray/config.json)
    linePre=$(sed -n '/'${user}'/=' /etc/SSHPlus/RegV2ray)
    sed -i "${linePre}d" /etc/SSHPlus/RegV2ray
    numl1=2
    let resta=$lineP-$numl1
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    sed -i "${resta}d" /etc/v2ray/config.json
    v2ray restart > /dev/null 2>&1
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\e[92m           SSH | UUID ELIMINADO COM EXITO "
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray


    }










    verusrsshv2ray() {
    clear 
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m                     VÊR UTILIZADORES SSH | UUID                        \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"


    local HOST="/etc/SSHPlus/RegV2ray"
    local IDEUUID="$(cat $HOST|cut -d'|' -f1)"
    local USERUUID="$(cat $HOST|cut -d'|' -f2)"
    local DATAUUID="$(cat $HOST|cut -d'|' -f3)"

    database="/root/usuarios.db"

    echo -e "\e[97m    UTILIZADOR SSH   |               UUID                 |     DATA     \e[93m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"

    list_user=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody)

    i=0
    unset _userPass
    unset _userPassUUID
    while read user hostreturn ; do
    IDEUUID=$(cat /etc/SSHPlus/RegV2ray|grep -w "$user"|cut -d'|' -f1)
    UserUuidList=$(cat /etc/SSHPlus/RegV2ray|grep -w "$user"|cut -d'|' -f2)
    DataExp=$(cat /etc/SSHPlus/RegV2ray|grep -w "$user"|cut -d'|' -f3)
    

	i=$(expr $i + 1)
	_oP=$i
	[[ $i == [1-9] ]] && i=0$i && oP+=" 0$i"
	expire="$(chage -l $user | grep -E "Account expires" | cut -d ' ' -f3-)"

    
	if [[ $expire == "never" ]]
	then
		echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$user\033[1;33m00/00/0000   S/DATA\033[0m"
	else
		databr="$(date -d "$expire" +"%Y%m%d")"
		hoje="$(date -d today +"%Y%m%d")"
		if [ $hoje -ge $databr ]
		then
			i_user=$(echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$user\033[1;37m")

			datanormal="$(echo -e "\033[1;31m$(date -d"$expire" '+%d/%m/%Y')")"
			expired=$(echo -e "\033[1;31mVENCEU\033[0m")
			printf '%-62s%-20s%s\n' "$i_user" "$IDEUUID" "$datanormal" "$expired"
            #echo "$user" "$IDEUUID" "$datanormal" "$ative"
			echo "exp" > /tmp/exp
		else
			i_user=$(echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$user\033[1;37m")
            
			datanormal="$(echo -e "\033[1;33m$(date -d"$expire" '+%d/%m/%Y')")"
			ative=$(echo -e "\033[1;32mVALIDO\033[0m")
            #echo "$user" "$IDEUUID" "$datanormal" "$ative"
			printf '%-62s%-20s%s\n' "$i_user" "$IDEUUID" "$datanormal" "$ative"
		fi
	fi

done <<< "${list_user}"
    echo ""
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray


    sshv2ray
    }





    alterardatasshv2ray() {
    clear 
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m                ALTERAR DATA UTILIZADORES SSH | UUID                    \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"


    local HOST="/etc/SSHPlus/RegV2ray"
    local IDEUUID="$(cat $HOST|cut -d'|' -f1)"
    local USERUUID="$(cat $HOST|cut -d'|' -f2)"
    local DATAUUID="$(cat $HOST|cut -d'|' -f3)"

    database="/root/usuarios.db"

    echo -e "\e[97m    UTILIZADOR SSH   |               UUID                 |     DATA     \e[93m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    tput setaf 3 ; tput bold ; echo ""; echo "LISTA DE UTILIZADORES SSH | UUID E SUAS DATAS:" ; tput sgr0
    echo ""
    list_user=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody)

    i=0
    unset _userPass
    unset _userPassUUID
    while read user hostreturn ; do
    IDEUUID=$(cat /etc/SSHPlus/RegV2ray|grep -w "$user"|cut -d'|' -f1)
    UserUuidList=$(cat /etc/SSHPlus/RegV2ray|grep -w "$user"|cut -d'|' -f2)
    DataExp=$(cat /etc/SSHPlus/RegV2ray|grep -w "$user"|cut -d'|' -f3)
    

	i=$(expr $i + 1)
	_oP=$i
	[[ $i == [1-9] ]] && i=0$i && oP+=" 0$i"
	expire="$(chage -l $user | grep -E "Account expires" | cut -d ' ' -f3-)"

    
	if [[ $expire == "never" ]]
	then
		echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$user\033[1;33m00/00/0000   S/DATA\033[0m"
	else
		databr="$(date -d "$expire" +"%Y%m%d")"
		hoje="$(date -d today +"%Y%m%d")"
		if [ $hoje -ge $databr ]
		then
			i_user=$(echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$user\033[1;37m")

			datanormal="$(echo -e "\033[1;31m$(date -d"$expire" '+%d/%m/%Y')")"
			expired=$(echo -e "\033[1;31mVENCEU\033[0m")
			printf '%-62s%-20s%s\n' "$i_user" "$IDEUUID" "$datanormal" "$expired"
			echo "exp" > /tmp/exp
		else
			i_user=$(echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$user\033[1;37m")
            
			datanormal="$(echo -e "\033[1;33m$(date -d"$expire" '+%d/%m/%Y')")"
			ative=$(echo -e "\033[1;32mVALIDO\033[0m")
			printf '%-62s%-20s%s\n' "$i_user" "$IDEUUID" "$datanormal" "$ative"
		fi
	fi
	_userPass+="\n${_oP}:${user}"
    _userPassUUID+="\n${_oP}:${IDEUUID}"
    _usuarioUUID+="\n${_oP}:${UserUuidList}"
    _userUuidDATA+="\n${_oP}:${DataExp}"
done <<< "${list_user}"
tput sgr0
echo ""
if [ -a /tmp/exp ]
then
	rm /tmp/exp
fi

num_user=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
echo -ne "\033[1;32mDIGITE UM NÚMERO OU UTILIZADOR SSH \033[1;33m[\033[1;36m1\033[1;33m-\033[1;36m$num_user\033[1;33m]\033[1;37m: " ; read option
if [[ -z $option ]]
then
	echo ""
	tput setaf 7 ; tput setab 1 ; tput bold ; echo "Erro,  Nome do utilizador vazio ou inválido! " ; tput sgr0
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray
fi
usuario=$(echo -e "${_userPass}" | grep -E "\b$option\b" | cut -d: -f2)
usuarioUUIDid=$(echo -e "${_userPassUUID}" | grep -E "\b$option\b" | cut -d: -f1)
UUID=$(echo -e "${_userPassUUID}" | grep -E "\b$option\b" | cut -d: -f2)
usuarioUUID=$(echo -e "${_usuarioUUID}" | grep -E "\b$option\b" | cut -d: -f2)
usuaroUuidDATA=$(echo -e "${_userUuidDATA}" | grep -E "\b$option\b" | cut -d: -f2)

if [[ -z $usuario ]]
then
	echo ""
	tput setaf 7 ; tput setab 1 ; tput bold ; echo "Erro,  Nome do utilizador vazio ou inválido!!! " ; tput sgr0
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray   
else
	if [[ `grep -c /$usuario: /etc/passwd` -ne 0 ]]
	then
	    echo ""
	    echo -e "\033[1;31mEX:\033[1;33m(\033[1;32mDATA: \033[1;37mDIA/MÊS/ANO \033[1;33mOU \033[1;32mDIAS: \033[1;37m30 - 60 - 90\033[1;33m)"
	    #echo "SSH"
        #echo "$usuario"
        #echo "-----"
        #echo "UUID"
        #echo "$usuarioUUIDid"
        #echo "$UUID"
        #echo "$usuarioUUID"
        #echo "$usuaroUuidDATA"
	    echo -ne "\033[1;32mNova data ou dias para o utilizador \033[1;33m$usuario: \033[1;37m"; read inputdate
	    if [[ "$(echo -e "$inputdate" | grep -c "/")" = "0" ]]; then 
	    	udata=$(date "+%d/%m/%Y" -d "+$inputdate days")
	    	sysdate="$(echo "$udata" | awk -v FS=/ -v OFS=- '{print $3,$2,$1}')"
	    else
	    	udata=$(echo -e "$inputdate")
	    	sysdate="$(echo "$inputdate" | awk -v FS=/ -v OFS=- '{print $3,$2,$1}')"
	    fi
		if (date "+%Y-%m-%d" -d "$sysdate" > /dev/null  2>&1)
		then
			if [[ -z $inputdate ]]
			then
				echo ""
				tput setaf 7 ; tput setab 1 ; tput bold ;	echo "Digitou uma data inválida ou inexistente!" ; echo "Digite uma data válida no formato DIA/MÊS/ANO " ; echo "Por exemplo: 21/04/2030" ; tput sgr0 ; tput sgr0
				echo ""	
                echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                sshv2ray
			else
				if (echo $inputdate | egrep [^a-zA-Z] &> /dev/null)
				then
					today="$(date -d today +"%Y%m%d")"
					timemachine="$(date -d "$sysdate" +"%Y%m%d")"
					if [ $today -ge $timemachine ]
					then
						echo ""
						tput setaf 7 ; tput setab 1 ; tput bold ;	echo "Digitou uma data passada ou o dia atual!" ; echo "Digite uma data futura e válida no formato DIA/MÊS/ANO" ; echo "Por exemplo: 21/04/2030" ; tput sgr0
						echo ""
                        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                        sshv2ray
					else
						chage -E $sysdate $usuario
                        #chage -E $sysdate $UUID
                        #echo "  $UUID | $usuarioUUID | $sysdate "
                        #echo "  $UUID | $nick | $sysdate " >> /etc/SSHPlus/RegV2ray
                        #Fecha=`date +%d-%m-%y-%R`
                        #cp /etc/SSHPlus/RegV2ray /etc/SSHPlus/v2ray/RegV2ray-"$Fecha"
                        #v2ray restart > /dev/null 2>&1
						#echo "$sysdate"
                        #echo "$usuario"
						tput setaf 7 ; tput setab 4 ; tput bold ; echo "Sucesso o utilizador $usuario nova data: $udata " ; tput sgr0
                        #tput setaf 7 ; tput setab 4 ; tput bold ; echo "Sucesso o utilizador $usuarioUUID nova data: $udata " ; tput sgr0
                        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                        sshv2ray
					fi
				else
					echo ""
					tput setaf 7 ; tput setab 1 ; tput bold ;	echo "Digitou uma data inválida ou inexistente!" ; echo "Digite uma data válida no formato DIA/MÊS/ANO" ; echo "Por exemplo: 21/04/2030" ; tput sgr0
					echo ""
                    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                    sshv2ray       
				fi
			fi
		else
			echo ""
			tput setaf 7 ; tput setab 1 ; tput bold ;	echo "Digitou uma data inválida ou inexistente!" ; echo "Digite uma data válida no formato DIA/MÊS/ANO" ; echo "Por exemplo: 21/04/2030" ; tput sgr0
			echo ""
            echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            sshv2ray         
		fi
	else
		echo " "
		tput setaf 7 ; tput setab 1 ; tput bold ;	echo "O utilizador $usuario não existe!" ; tput sgr0
		echo " "
        echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        sshv2ray
	fi

fi
    
    sshv2ray
    }



    alterarlimitesshv2ray() {
    clear 
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m               ALTERAR LIMITE UTILIZADORES SSH | UUID                   \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"

    local HOST="/etc/SSHPlus/RegV2ray"
    local IDEUUID="$(cat $HOST|cut -d'|' -f1)"
    local USERUUID="$(cat $HOST|cut -d'|' -f2)"
    local DATAUUID="$(cat $HOST|cut -d'|' -f3)"

    database="/root/usuarios.db"

if [ ! -f "$database" ]; then
	tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "Arquivo $database não encontrado" ; echo "" ; tput sgr0
	exit 1
else
    echo -e "\e[97m    UTILIZADOR SSH   |               UUID                 |     LIMITE     \e[93m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
	tput setaf 3 ; tput bold ; echo ""; echo "LISTA DE UTILIZADORES SSH | UUID E SEUS LIMITES:" ; tput sgr0
	echo ""
	_userT=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody)
	i=0
	unset _userPass
	while read _user; do
    IDEUUID=$(cat /etc/SSHPlus/RegV2ray|grep -w "$_user"|cut -d'|' -f1)
    UserUuidList=$(cat /etc/SSHPlus/RegV2ray|grep -w "$_user"|cut -d'|' -f2)
    DataExp=$(cat /etc/SSHPlus/RegV2ray|grep -w "$_user"|cut -d'|' -f3)

		i=$(expr $i + 1)
		_oP=$i
		[[ $i == [1-9] ]] && i=0$i && oP+=" 0$i"
		if [[ "$(grep -wc "$_user" $database)" != "0" ]]; then
			limit=$(grep -w "$_user" $database |cut -d' ' -f2)
		else
			limit='1'
		fi
   
		l_user=$(echo -e "\033[1;31m[\033[1;36m$i\033[1;31m] \033[1;37m- \033[1;32m$_user\033[1;37m")
        lim=$(echo -e "\033[1;33mLimite\033[1;37m: $limit")
        printf '%-62s%-20s%s\n' "$l_user" "$IDEUUID" "$lim"
		_userPass+="\n${_oP}:${_user}"
	done <<< "${_userT}"

	echo ""
	num_user=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
    
	echo -ne "\033[1;32mDIGITE UM NÚMERO OU UTILIZADOR SSH \033[1;33m[\033[1;36m1\033[1;31m-\033[1;36m$num_user\033[1;33m]\033[1;37m: " ; read option
	usuario=$(echo -e "${_userPass}" | grep -E "\b$option\b" | cut -d: -f2)
    
    if [[ -z $option ]]; then
        tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "Utilizador vazio ou não existente" ; echo "" ; tput sgr0
		echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        sshv2ray
	elif [[ -z $usuario ]]; then
		tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "Utilizador vazio ou não existente" ; echo "" ; tput sgr0
		echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
        sshv2ray
	else
		if cat /etc/passwd |grep -w $usuario > /dev/null; then
			echo -ne "\n\033[1;32mNovo limite para o Utilizador \033[1;33m$usuario\033[1;37m: "; read sshnum
			if [[ -z $sshnum ]]
			then
				tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "Digitou um número inválido!" ; echo "" ; tput sgr0
				echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                sshv2ray
			else
				if (echo $sshnum | egrep [^0-9] &> /dev/null)
				then
					tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "Digitou um número inválido!" ; echo "" ; tput sgr0
					echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                    sshv2ray
				else
					if [[ $sshnum -lt 1 ]]
					then
						tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "Digite um número maior que zero!" ; echo "" ; tput sgr0
						echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                        sshv2ray
					else
						grep -v ^$usuario[[:space:]] /root/usuarios.db > /tmp/a
						sleep 1
						mv /tmp/a /root/usuarios.db
						echo $usuario $sshnum >> /root/usuarios.db
						tput setaf 7 ; tput setab 4 ; tput bold ; echo "" ; echo "Limite aplicado para o Utilizador $usuario foi $sshnum " ; tput sgr0
						sleep 2
						echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
                        sshv2ray
					fi
				fi
			fi			
		else
			tput setaf 7 ; tput setab 1 ; tput bold ; echo "" ; echo "O Utilizador $usuario não foi encontrado" ; echo "" ; tput sgr0
			echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
            sshv2ray
		fi
	fi
fi

    
    sshv2ray
    }



    limpiador_activador () {
    unset PIDGEN
    PIDGEN=$(ps aux|grep -v grep|grep "limv2ray")
    if [[ ! $PIDGEN ]]; then
    screen -dmS limv2ray watch -n 21600 limv2ray
    else
    #killall screen
    screen -S limv2ray -p 0 -X quit
    fi
    unset PID_GEN
    PID_GEN=$(ps x|grep -v grep|grep "limv2ray")
    [[ ! $PID_GEN ]] && PID_GEN="\e[91m [ DESATIVADO ] " || PID_GEN="\e[92m [ ATIVADO ] "
    statgen="$(echo $PID_GEN)"
    clear 
    clear
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[44;1;37m            ELIMINAR EXPIRADOS | UUID V2RAY             \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo ""
    echo -e "                    $statgen " 
    echo "" 						
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;37m• \033[1;33mEnter Para Continuar\033[1;31m" && read enter
    sshv2ray

    }

    selection_fun () {
    local selection="null"
    local range
    for((i=0; i<=$1; i++)); do range[$i]="$i "; done
    while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
    echo -ne "\033[1;37m ► Selecione uma Opção: " >&2
    read selection
    tput cuu1 >&2 && tput dl1 >&2
    done
    echo $selection
    }

    PID_GEN=$(ps x|grep -v grep|grep "limv2ray")
    [[ ! $PID_GEN ]] && PID_GEN="\e[91m [ DESATIVADO ] " || PID_GEN="\e[92m [ ATIVADO ] "
    statgen="$(echo $PID_GEN)"
    #SPR & 
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"

    sshv2ray() {
		while true $x != "ok"; do
			[[ ! -e '/home/sshplus' ]] && exit 0
			clear
			figlet "V2Ray-PRO" | lolcat
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%55s%s%-12s\n' "GERIR SSH + UUID" ; tput sgr0
echo "" 
			xv2ray1=`if netstat -tunlp |grep v2ray 1> /dev/null 2> /dev/null; then
			echo -e "\e[92m ATIVADO"
			else
			echo -e "\e[91m DESATIVADO"
			fi`;
            echo -e "\033[1;32mSERVICO: \033[1;33mV2RAY \033[1;32m$xv2ray1\033[1;37m" 
			xv2ray=`if netstat -tunlp |grep v2ray 1> /dev/null 2> /dev/null; then
			echo -e "\033[1;32m◉ "
			else
			echo -e "\033[1;31m○ "
			fi`;          
			echo -e "╔═════════════════════•⊱✦⊰•═════════════════════╗" | lolcat
			echo ""
echo -e "\033[1;31m
[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mCRIAR UTILIZADOR SSH + V2RAY \033[1;31m
[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mREMOVER UTILIZADOR SSH + V2RAY \033[1;31m
[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mVÊR UTILIZADOR SSH + V2RAY\033[1;31m
[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mMUDAR DATA UTILIZADOR SSH + V2RAY\033[1;31m
[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mMUDAR LIMITE UTILIZADOR SSH + V2RAY\033[1;31m
[\033[1;36m33\033[1;31m] \033[1;37m• \033[1;33mVOLTAR \033[1;32m<\033[1;33m<\033[1;31m< \033[1;31m"

			echo ""
			echo -e "╚═════════════════════•⊱✦⊰•═════════════════════╝" | lolcat
			echo ""
			tput civis
			echo -ne "\033[1;32mESCOLHA UMA OPÇÃO \033[1;33m»\033[1;31m\033[1;37m "
			read x
			tput cnorm
			clear
			case $x in
			1 | 01)
				addusrsshv2ray
				;;
			2 | 02)
				delusrsshv2ray
				;;
			3 | 03)
				verusrsshv2ray
				;;
		    4 | 04)
				alterardatasshv2ray
                ;;              
		    5 | 05)
				alterarlimitesshv2ray
				;;
			33 | 33)
				echo -e "\033[1;31mSaindo...\033[0m"
				sleep 2
				clear
				menu
				;;
			*)
				echo -e "\033[1;31mOpcao invalida !\033[0m"
				sleep 2
				;;
			esac
		done
	}
    sshv2ray

}